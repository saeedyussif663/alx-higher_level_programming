``test for base_geometry``
=============================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()


``check with positive value``
>>> bg.integer_validator("width", 89)

``check with zero``
>>> bg.integer_validator("height", 0)     
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\USER\Desktop\alx-higher_level_programming\0x0A-python-inheritance\7-base_geometry.py", line 26, in integer_validator
    raise ValueError(f"{name} must be greater than 0")
ValueError: height must be greater than 0

``check with a negative value``
>>> bg.integer_validator("distance", -2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\USER\Desktop\alx-higher_level_programming\0x0A-python-inheritance\7-base_geometry.py", line 26, in integer_validator
    raise ValueError(f"{name} must be greater than 0")
ValueError: distance must be greater than 0


``checking value as a string``
>>> bg.integer_validator("distance", "-2") 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\USER\Desktop\alx-higher_level_programming\0x0A-python-inheritance\7-base_geometry.py", line 24, in integer_validator
    raise TypeError(f"{name} must be an integer")
TypeError: distance must be an integer

