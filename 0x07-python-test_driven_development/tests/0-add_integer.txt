The ``add_interger`` module
======================

Using ``add_interger``
-------------------

``add_interger`` from the ``add_integer`` module:
    ``importing the function``

    >>> add_integer = __import__('0-add_integer').add_integer

    ``Checking if first line of script is #!/usr/bin/python``
    >>> infile = open('0-add_integer.py', 'r')
    >>> print(infile.readline().strip('\n'))
    #!/usr/bin/python3

    ``Checking if the last line ends with a new lin``
    >>> with open('0-add_integer.py') as f:
    ...     for line in f:
    ...         pass
    ...     last_line = line
    ...
    >>> print(last_line)
            return a + b
    <BLANKLINE>


    ``Checking for module documentation``
    >>> print(__import__("0-add_integer").__doc__)
    The Module contains the add integer function
    the function takes two integer/float arguments a and b
    b has a optional argument of 98
    A TypeError is raised if either a or b is not an interger or float
    Returns the sum (integer) of both arguments

    ``Checking for function documentation``
    >>> print(__import__("0-add_integer").add_integer.__doc__)
    A function that returns the sum of two arguments
    Args: a and b(optional_argument)to 98
    Return: integer (a + b)

    ``checking for two positive integers``
    >>> add_integer(2, 5)
    7

    ``checking for a positive integer and a negative integer``
    >>> add_integer("hello", 5)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "C:\Users\USER\Desktop\alx-higher_level_programming\0x07-python-test_driven_development\0-add_integer.py", line 14, in add_integer
            raise TypeError("a must be an integer")
    TypeError: a must be an integer

    ``checking for an integer and a float
    >>> add_integer(6, 3.0)
    9

    ``checking for an integer and a float
    >>> add_integer(6, 3.0)
    9